{"version":3,"sources":["../src/query.js"],"names":["dbName","colName","getOrders","client","db","col","collection","find","sort","_id","toArray","result","close","getOrderByid","Id","orderId","parseInt","OrderId","console","log","createOrder","resName","resUrl","creator","autoindex","Promise","resolve","reject","autoincrement","getNextSequence","err","autoIndex","genId","insertData","RestaurantName","RestaurantUrl","Creator","MenuList","Status","CreateDate","Date","insert","stack","editOrder","id","updateData","update","$set","Url","deleteOrder","remove"],"mappings":"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","file":"query.js","sourcesContent":["import autoincrement from 'mongodb-autoincrement';\nimport { connectDB } from './mongo';\n\nconst dbName = 'NowOrder';\nconst colName = 'orders';\n\nconst getOrders = async () => {\n  const client = await connectDB();\n  const db = client.db(dbName);\n  const col = db.collection(colName);\n  const result = await col.find({}).sort({ _id: -1 }).toArray();\n  client.close();\n  return result;\n};\n\nconst getOrderByid = async (Id) => {\n  const orderId = parseInt(Id, 10);\n  const client = await connectDB();\n  const db = client.db(dbName);\n  const col = db.collection(colName);\n  try {\n    const result = await col.find({ OrderId: orderId }).toArray();\n    client.close();\n    return result;\n  } catch (error) {\n    console.log(error);\n    return error;\n  }\n};\n\nconst createOrder = async (resName, resUrl, creator) => {\n  const client = await connectDB();\n  const db = client.db(dbName);\n  const col = db.collection(colName);\n  try {\n    const autoindex = () => new Promise((resolve, reject) => {\n      autoincrement.getNextSequence(db, colName, (err, autoIndex) => {\n        if (err) reject(err);\n        resolve(autoIndex);\n      });\n    });\n    const genId = await autoindex();\n    const insertData = {\n      RestaurantName: resName,\n      RestaurantUrl: resUrl,\n      OrderId: genId,\n      Creator: creator,\n      MenuList: [],\n      Status: 'Pending',\n      CreateDate: new Date(),\n    };\n    const result = await col.insert(insertData);\n    client.close();\n    return result;\n  } catch (error) {\n    return console.log(error.stack);\n  }\n};\n\nconst editOrder = async (resName, resUrl, id) => {\n  const client = await connectDB();\n  const db = client.db(dbName);\n  const col = db.collection(colName);\n  const updateData = {\n    RestaurantName: resName,\n    RestaurantUrl: resUrl,\n    OrderId: parseInt(id, 10),\n  };\n  try {\n    const result = await col.update({ OrderId: updateData.OrderId }, {\n      $set: {\n        RestaurantName: updateData.RestaurantName,\n        RestaurantUrl: updateData.Url,\n      },\n    });\n    return result;\n  } catch (error) {\n    return console.log(error.stack);\n  }\n};\n\nconst deleteOrder = async (Id) => {\n  const OrderId = parseInt(Id, 10);\n  const client = await connectDB();\n  const db = client.db(dbName);\n  const col = db.collection(colName);\n  try {\n    const result = col.remove({ OrderId });\n    client.close();\n    return result;\n  } catch (error) {\n    return console.log(error.stack);\n  }\n};\n\nexport {\n  getOrders,\n  getOrderByid,\n  createOrder,\n  editOrder,\n  deleteOrder,\n};\n"]}