{"version":3,"sources":["../src/db_server.js"],"names":["cors","require","fastify","port","autoIncreement","MongoClient","assert","url","dbName","use","register","err","console","log","post","req","reply","OrderId","parseInt","body","connect","client","db","collection","update","$set","Status","result","send","close","params","id","Name","DishName","unit","find","toArray","docs","length","findOneAndUpdate","$push","MenuList","List","findOne","menuList","name","menu","list","push","$pull","listen"],"mappings":"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","file":"db_server.js","sourcesContent":["const cors = require('cors');\nconst fastify = require('fastify')();\n\n// const moment = require('moment');\n\nconst port = 1956;\nconst autoIncreement = require('mongodb-autoincrement');\nconst { MongoClient } = require('mongodb');\nconst assert = require('assert');\n// Connection URL\nconst url = 'mongodb://localhost:27017';\n// Database Name\nconst dbName = 'NowOrder';\nfastify.use(cors());\n\n/* fastify.get('/api/Orders/', (req, reply) => {\n  MongoClient.connect(url, (err, client) => {\n    const db = client.db(dbName);\n    const collection = db.collection('orders');\n    collection.find({}).sort({ _id: -1 }).toArray((err, docs) => {\n      assert.equal(err, null);\n      if (err) return reply.send(err);\n      reply.send(docs);\n      client.close();\n    });\n  });\n}); */\n\nfastify.register(require('./orders'), (err) => {\n  if (err) console.log(err);\n});\n\n// fastify.get('/api/Orders/:id', (req, reply) => {\n//   const OrderId = parseInt(req.params.id, 10);\n//   MongoClient.connect(url, (err, client) => {\n//     const db = client.db(dbName);\n//     const collection = db.collection('orders');\n//     collection.find({ OrderId }).toArray((err, docs) => {\n//       assert.equal(err, null);\n//       if (err) return reply.send(err);\n//       reply.send(docs);\n//       client.close();\n//     });\n//   });\n// });\n\n\n// fastify.post('/api/Orders/', (req, reply) => {\n//   const RestaurantName = req.body.RestaurantName;\n//   const RestaurantUrl = req.body.RestaurantUrl;\n//   const Creator = req.body.Creator;\n//   MongoClient.connect(url, (err, client) => {\n//     const db = client.db(dbName);\n//     const collection = db.collection('orders');\n//     autoIncreement.getNextSequence(db, 'orders', (err, autoIndex) => {\n//       collection.insert({\n//         OrderId: autoIndex,\n//         RestaurantName,\n//         RestaurantUrl,\n//         Creator,\n//         CreateDate: new Date(),\n//         MenuList: [],\n//         Status: 'Pending',\n//       }, (err, doc) => {\n//         if (err) return reply.send(err);\n//         client.close();\n//         console.log(`Created OrderId : ${autoIndex}`);\n//         reply.send(`Created OrderId : ${autoIndex}`);\n//       });\n//     });\n//   });\n// });\n\n// fastify.patch('/api/Orders/', (req, reply) => {\n//   const RestaurantName = req.body.RestaurantName;\n//   const RestaurantUrl = req.body.RestaurantUrl;\n//   const OrderId = req.body.OrderId;\n//   MongoClient.connect(url, (err, client) => {\n//     const db = client.db(dbName);\n//     const collection = db.collection('orders');\n//     collection.update({\n//       OrderId,\n//     }, {\n//       $set: {\n//         RestaurantName,\n//         RestaurantUrl,\n//       },\n\n//     }, (err, result) => {\n//       if (err) return console.log(err);\n//       reply.send(result);\n//       client.close();\n//       console.log(`Update OrderId${OrderId}`);\n//     });\n//   });\n// });\n\n// fastify.delete('/api/order/delete/:id', (req, reply) => {\n//   const OrderId = parseInt(req.params.id, 10);\n//   // console.log(OrderId)\n//   MongoClient.connect(url, (err, client) => {\n//     if (err) return console.log(err);\n//     const db = client.db(dbName);\n//     const collection = db.collection('orders');\n//     collection.remove({ OrderId }, (err, result) => {\n//       if (err) return console.log(err);\n//       reply.send(`Delete OrderId : ${OrderId}`);\n//       client.close();\n//       console.log(`${result.result}Delete OrderId${OrderId}`);\n//     });\n//   });\n// });\n\nfastify.post('/api/Orders/finish/', (req, reply) => {\n  const OrderId = parseInt(req.body.OrderId, 10);\n\n  MongoClient.connect(url, (err, client) => {\n    const db = client.db(dbName);\n    const collection = db.collection('orders');\n    collection.update({ OrderId }, {\n      $set: {\n        Status: 'Ordered',\n      },\n    }, (err, result) => {\n      if (err) return console.log(err);\n      reply.send(`Ordered OrderId : ${OrderId}`);\n      client.close();\n      console.log(result.result, `Ordered OrderId : ${OrderId}`);\n    });\n  });\n});\n// --------------------------///\n\nfastify.post('/api/Orders/:id', (req, reply) => {\n  const OrderId = parseInt(req.params.id);\n  const Name = req.body.Name;\n  const DishName = req.body.DishName;\n  const unit = req.body.unit;\n  MongoClient.connect(url, (err, client) => {\n    const db = client.db(dbName);\n    const collection = db.collection('orders');\n    if (err) return console.log(err);\n    collection.find({ OrderId, 'MenuList.DishName': DishName }).toArray((err, docs) => {\n      if (err) return console.log(err);\n      if (docs.length <= 0) {\n        collection.findOneAndUpdate({ OrderId }, {\n          $push: {\n            MenuList: {\n              DishName,\n              List: [{\n                Name,\n                unit,\n              }],\n            },\n          },\n        });\n        reply.send(`Add OrderId : ${OrderId}`);\n        console.log(`Add OrderId : ${OrderId}`);\n        client.close();\n      } else {\n        collection.findOne({ OrderId }, { MenuList: 1 }, (err, docs) => {\n          if (err) return console.log(err);\n          const menuList = docs.MenuList;\n          const name = DishName;\n          const menu = menuList.find(list => list.DishName === name);\n          menu.List.push({ Name, unit });\n          collection.update({ OrderId, 'MenuList.DishName': DishName }, { $set: { 'MenuList.$.List': menu.List } });\n          console.log(`Add OrderId : ${OrderId}`);\n          reply.send(`Add OrderId : ${OrderId}`);\n          client.close();\n        });\n      }\n    });\n  });\n});\n\nfastify.post('/api/Orders/dishdel/:id', (req, reply) => {\n  const OrderId = parseInt(req.params.id, 10);\n  const Name = req.body.Name;\n  const DishName = req.body.DishName;\n  MongoClient.connect(url, (err, client) => {\n    const db = client.db(dbName);\n    const collection = db.collection('orders');\n    if (err) return console.log(err);\n    collection.update({ OrderId, 'MenuList.DishName': DishName }, { $pull: { 'MenuList.$.List': { Name } } });\n    console.log(`Delete ${Name} from OrderId : ${OrderId}`);\n    reply.send(`Delete ${Name} from OrderId : ${OrderId}`);\n    client.close();\n  });\n});\n\nfastify.listen(port, 'localhost', (err) => {\n  if (err) throw err;\n  console.log(`Api server Runing on ${port}`);\n});\n\n"]}